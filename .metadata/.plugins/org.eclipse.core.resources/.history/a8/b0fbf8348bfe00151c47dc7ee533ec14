/**
* DrawingWindow.java 
* @author AdamAnderson
*
* A DrawingWindow is a window used by Processing that is paired with a MenuWindow
* to allow for easy adjustment of parameters during the execution of a Processing sketch.
* Parameters are stored in a Map that assigns parameter names to doubles representing their
* value.
* 
* To use DrawingWindows in your own creation, simply change the draw() method so the 
* DrawingWindow will perform whatever actions you desire. The methods 
* settings(), setup(), and draw() are located at the bottom of the class source file.
*/

package menu_package;

import processing.core.PApplet;
import java.util.Map;
import java.util.LinkedHashMap;

public class DrawingWindow extends PApplet {
	private int width;
	private int height;
	private String title;
	private Map<String, Double> parameters;	
	private int menuWidth;
	private int menuHeight;
	private MenuWindow menu;
	private static final String DEFAULT_TITLE = "Drawing Window";

	/**
	* Base constructor for a DrawingWindow. Takes in the window width and height as parameters
	* and sets the size of the DrawingWindow accordingly, as well as a a String title for the
	* DrawingWindow, a Map of parameters, and the dimensions of the MenuWindow
	* DrawingWindow.
	* @param width
	* @param height
	* @param title
	* @param parameters
	* @param menu
	*/
	public DrawingWindow(int width, int height, String title, Map<String, Double> parameters,
						int menuWidth, int menuHeight) {
		this.width = width;
		this.height = height;
		this.title = title;
		this.parameters = parameters;
		this.menuWidth = menuWidth;
		this.menuHeight = menuHeight;
		createMenu(menuWidth, menuHeight);
	}
	
	/**
	* Constructor for DrawingWindow where only width, height, title, and menu 
	* dimensions are given
	* @param width
	* @param height
	* @param title
	* @param menu
	*/
	public DrawingWindow(int width, int height, String title, int menuWidth, int menuHeight) {
		this(width, height, title, new LinkedHashMap<String, Double>(), menuWidth, menuHeight);
	}
	
	/**
	 * Constructor for DrawingWindow which only requires width, height, and a title.
	 * MenuWindow dimensions are set equal to DrawingWindow dimensions
	 * @param width
	 * @param height
	 * @param title
	 */
	public DrawingWindow(int width, int height, String title) {
		this(width, height, title, width, height);
	}
	
	/**
	 * Most basic Constructor for DrawingWindow requiring only window dimensions.
	 * DrawingWindow and MenuWindow will be the same size, and the DrawingWindow
	 * title will just be "Drawing Window"
	 * @param width
	 * @param height
	 */
	public DrawingWindow(int width, int height) {
		this(width, height, DEFAULT_TITLE);
	}
	
	/**
	 * Retrieves updated parameters from the MenuWindow so they can be used
	 * by the DrawingWindow
	 */
	public void updateParameters() {
		parameters = menu.updateParameters();
	}
	
	/**
	 * Adds a parameter to the parameter list with the given name
	 * and a default value of defaultValue
	 * @param name
	 * @param defaultValue
	 */
	public void addParameter(String name, double defaultValue) {
		parameters.put(name, defaultValue);
		createMenu(menuWidth, menuHeight);
	}
	
	/**
	 * Creates the DrawingWindow as well as its accompanying MenuWindow. 
	 */
	public void createWindow() {
		String[] title = {this.title};
		PApplet.runSketch(title, this);
	}
	
	/*
	 * Helper method creates a MenuWindow object for the parameters stored by
	 * the DrawingWindow. The input parameters represent the dimensions
	 * of the menu to be drawn
	 */
	private void createMenu(int menuWidth, int menuHeight) {
		menu = new MenuWindow(menuWidth, menuHeight, "Menu for " + title, parameters);
	}
	
	
	/*
	 * Initialize the window size
	 */
	public void settings() {
		size(width, height);	
	}
	/*
	 * Initialize the window
	 */
	public void setup() {
		background(255);
		fill(0);
		noStroke();
		rectMode(CENTER);
	}
	/*
	 * The draw function should be updated so that the DrawingWindow creates
	 * whatever the user desires.
	 */
	public void draw() {
		updateParameters();
		
		/* Add your code below */
		
		
		
	}


}
