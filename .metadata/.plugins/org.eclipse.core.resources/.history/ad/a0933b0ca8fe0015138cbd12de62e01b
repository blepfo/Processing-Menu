/**
 * MenuWindow.java
 * @author AdamAnderson
 * 
 * A MenuWindow is created alongside a DrawingWindow to allow for parameter
 * tweaking while a Processing Sketch is being run. A MenuWindow displays the 
 * name and value of all of its parameters and allows the user to change
 * the values. When a MenuWindow is created without specifying window
 * dimensions, the menu size scales depending on the number of parameters
 */

package menu_package;

import processing.core.PApplet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.Set;
import javax.swing.JOptionPane;

public class MenuWindow extends ProcessingWindow {
	private int width;
	private int height;
	private String title;
	private Map<String, Double> parameters;
	private Map<String, Button> updateButtons;
	private static final int buttonHeight = 50;
	
	/**
	 * Base constructor for a MenuWindow. Takes in a width and height for the window dimenstions,
	 * a String title, and a parameter map relating Strings with the names of the parameters to 
	 * doubles representing their values.
	 * @param width
	 * @param height
	 * @param title
	 * @param parameters
	 */
	 public MenuWindow(int width, int height, String title, Map<String, Double> parameters) {
		super(width, height, title);
		this.parameters = parameters;
		
	 }
	 
	 /**
	  * If the mouse is pressed over one of the update buttons, a dialog prompting
	  * the user for a new value will be launched. If the user does not enter a 
	  * valid number, the parameter value will not be changed.
	  */
	 public void mousePressed() {
		 for (String parameter : updateButtons.keySet()) {
			 // Check if mouse was over an updateButton when pressed
			 if (updateButtons.get(parameter).mouseOver()) {
				 System.out.println("Update requested for: " + parameter);
				 // Prompt user for value to update parameter with
				 Double newValue;
				 String input = JOptionPane.showInputDialog("Enter new value");
				 // Try to set the newValue to the user's input
				 try {
					 newValue = Double.parseDouble(input);
				 }
				 catch (NumberFormatException e) {
					 // If user input was invalid, do not change the value
					 newValue = parameters.get(parameter);
				 }
				 parameters.put(parameter,  newValue);
			 }
		 }
	 }
	 	 
	 /**
	  * Draw the menu to the MenuWindow by spacing all parameters equally given
	  * the window dimensions.
	  */
	 public void draw() {
		 Set<String> parameterNames = parameters.keySet();
		 int numParameters = parameterNames.size();
		 float horizontalSpacing = (float) ((float) width / (float) numParameters);
		 float verticalSpacing = (float) ((float) height / (float) numParameters);
		 float centerX;
		 float centerY;
		 // Iterate through each parameter, create an updateButton for the parameter,
		 // and draw it to the output window
		 for (String parameter : parameterNames) {
			 
		 }
	 }
	 
	 public void setup() {
		 background(255);
		 fill(0);
	 }

	 private class Button {
		 private int centerX;
		 private int centerY;
		 private int bWidth;
		 private int bHeight;
		 
		 private void draw() {
			 rectMode(CENTER);
			 fill(50);
			 rect(centerX, centerY, bWidth*3, bHeight*2);
		 }
		 
		 /**
		  * Returns true 
		  * @return
		  */
		 private boolean mouseOver() {
			 boolean isPressed = false;
			 if ((mouseX > centerX - bWidth) && (mouseX < centerX + bWidth) &&
					 (mouseY > centerY - bHeight) && (mouseY < bHeight + mouseY)) {
				 isPressed = true;				 
			 }
			 return isPressed;
		 }
	 }
	

}
